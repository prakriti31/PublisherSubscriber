package com.example.publishersubscriber.clientAPIlibrary;

import com.example.publishersubscriber.serverprogram.MessageBroker;

import java.util.List;

public class ClientAPIImpl implements ClientAPI {

    private final MessageBroker messageBroker;

    // Holds the reference to the message broker and ensures the value is not reassigned
    public ClientAPIImpl(MessageBroker messageBroker) {
        this.messageBroker = messageBroker;
    }

    // Register Publisher
    // Assigns task to messageBroker and returns a new publisherID generated by messageBroker
    @Override
    public String registerNewPublisher() {
        return messageBroker.registerNewPublisher();
    }

    // Create Topic
    // Assigns task to messageBroker and creates a new topic under the publisher using messageBroker
    @Override
    public void createNewTopicToPublisher(String publisherId, String topic) {
        messageBroker.createNewTopicToPublisher(publisherId, topic);
    }

    // Delete Topic
    // Assigns task to messageBroker and deletes the topic under the publisher using messageBroker
    @Override
    public void deleteTopicFromPublisher(String publisherId, String topic) {
        messageBroker.deleteTopicFromPublisher(publisherId, topic);
    }

    // Send Message
    // Assigns task to messageBroker and sends a message to the topic using messageBroker
    @Override
    public void sendMessageToTopic(String publisherId, String topic, String message) {
        messageBroker.sendMessageToTopic(publisherId, topic, message);
    }

    // Register Subscriber
    // Assigns task to messageBroker and returns a new subscriberID generated by messageBroker
    @Override
    public String registerNewSubscriber() {
        return messageBroker.registerSubscriber();
    }

    // Subscribe to Topic
    // Assigns task to messageBroker and subscribes to a topic using messageBroker
    @Override
    public void subscribeToTopic(String subscriberId, String topic) {
        messageBroker.subscribeToTopic(subscriberId, topic);
    }

    // Pull Messages from Topic
    // Assigns task to messageBroker and returns a new/unread messages in the pool using messageBroker
    @Override
    public List<String> pullMessagesFromPool(String subscriberId, String topic) {
        return messageBroker.pullMessagesFromPool(subscriberId, topic);
    }
}
